"""Template management handlers."""

from pyrogram import Client
from pyrogram.types import Message
from infra.logging import get_logger
from infra.db import mongo_client

logger = get_logger(__name__)


async def set_template_command(client: Client, message: Message):
    """Set MyDramaList template for user."""
    user_id = message.from_user.id
    
    # Get template from message
    if message.reply_to_message and message.reply_to_message.text:
        template = message.reply_to_message.text
    else:
        parts = message.text.split(' ', 1)
        if len(parts) < 2:
            await message.reply_text(
                "**Usage:** `/setmdltemplate <template>` or reply to a template message\n\n"
                "**Example Template:**\n"
                "```\n"
                "üé≠ <b>{title}</b>\n"
                "üìç {country} | Episodes: {episodes}\n"
                "‚≠ê Rating: {rating}\n"
                "üé¨ Genres: {genres}\n"
                "üìñ {synopsis}\n"
                "```\n\n"
                "**Popular Placeholders:**\n"
                "‚Ä¢ `{title}` - Drama title\n"
                "‚Ä¢ `{rating}` - User rating\n"
                "‚Ä¢ `{synopsis}` - Plot summary\n"
                "‚Ä¢ `{country}` - Country of origin\n"
                "‚Ä¢ `{episodes}` - Number of episodes\n"
                "‚Ä¢ `{genres}` - Genres with emojis\n"
                "‚Ä¢ `{year}` - Release year\n\n"
                "Use /mdlplaceholders to see all available placeholders!"
            )
            return
        template = parts[1]
    
    try:
        # Save template to database
        await mongo_client.db.mdl_templates.update_one(
            {"user_id": user_id},
            {"$set": {"user_id": user_id, "template": template}},
            upsert=True
        )
        
        logger.info(f"User {user_id} set MDL template")
        await message.reply_text("‚úÖ MyDramaList template set successfully!")
        
    except Exception as e:
        logger.error(f"Error setting MDL template: {e}")
        await message.reply_text("‚ùå Failed to set template.")


async def get_template_command(client: Client, message: Message):
    """Get user's MyDramaList template."""
    user_id = message.from_user.id
    
    try:
        template_doc = await mongo_client.db.mdl_templates.find_one({"user_id": user_id})
        
        if template_doc:
            template = template_doc.get("template", "")
            await message.reply_text(f"üìù Your current MyDramaList template:\n\n`{template}`")
        else:
            await message.reply_text("‚ÑπÔ∏è You don't have a custom MyDramaList template set.")
            
    except Exception as e:
        logger.error(f"Error getting MDL template: {e}")
        await message.reply_text("‚ùå Failed to get template.")


async def remove_template_command(client: Client, message: Message):
    """Remove user's MyDramaList template."""
    user_id = message.from_user.id
    
    try:
        result = await mongo_client.db.mdl_templates.delete_one({"user_id": user_id})
        
        if result.deleted_count > 0:
            logger.info(f"User {user_id} removed MDL template")
            await message.reply_text("‚úÖ MyDramaList template removed successfully!")
        else:
            await message.reply_text("‚ÑπÔ∏è You don't have a MyDramaList template to remove.")
            
    except Exception as e:
        logger.error(f"Error removing MDL template: {e}")
        await message.reply_text("‚ùå Failed to remove template.")


async def preview_template_command(client: Client, message: Message):
    """Preview user's MyDramaList template."""
    user_id = message.from_user.id
    
    try:
        template_doc = await mongo_client.db.mdl_templates.find_one({"user_id": user_id})
        
        if not template_doc:
            await message.reply_text("‚ÑπÔ∏è You don't have a custom MyDramaList template set.")
            return
        
        # Mock data for preview (comprehensive)
        mock_data = {
            "title": "Sample Drama",
            "complete_title": "Sample Drama: The Complete Title",
            "native_title": "ÏÉòÌîå ÎìúÎùºÎßà",
            "also_known_as": "Sample, Example Drama",
            "rating": "8.5",
            "synopsis": "This is a sample synopsis for preview. A compelling story about...",
            "country": "South Korea",
            "episodes": "16",
            "genres": "üé≠ Romance, üòÇ Comedy",
            "year": "2023",
            "type": "Drama",
            "duration": "60 min",
            "aired": "2023-01-01 to 2023-04-30",
            "aired_on": "tvN",
            "original_network": "tvN",
            "content_rating": "15+",
            "score": "8.5",
            "ranked": "#25",
            "popularity": "#15", 
            "watchers": "12,345",
            "favorites": "1,234",
            "tags": "Drama, Romance, Comedy",
            "poster": "https://example.com/poster.jpg",
            "link": "https://mydramalist.com/sample-drama",
            "release_date": "January 1, 2023"
        }
        
        try:
            preview = template_doc["template"].format(**mock_data)
            await message.reply_text(f"üëÅÔ∏è **Template Preview:**\n\n{preview}")
        except KeyError as e:
            await message.reply_text(f"‚ùå Template error: Unknown placeholder {e}")
        except Exception as e:
            await message.reply_text(f"‚ùå Template formatting error: {e}")
            
    except Exception as e:
        logger.error(f"Error previewing MDL template: {e}")
        await message.reply_text("‚ùå Failed to preview template.")


# IMDB Template handlers
async def set_imdb_template_command(client: Client, message: Message):
    """Set IMDB template for user."""
    user_id = message.from_user.id
    
    # Get template from message
    if message.reply_to_message and message.reply_to_message.text:
        template = message.reply_to_message.text
    else:
        parts = message.text.split(' ', 1)
        if len(parts) < 2:
            await message.reply_text(
                "**Usage:** `/setimdbtemplate <template>` or reply to a template message\n\n"
                "**Example Template:**\n"
                "```\n"
                "üé¨ <b>{title}</b> ({year})\n"
                "‚≠ê {rating}/10 ({votes} votes)\n"
                "üé≠ Cast: {cast}\n"
                "üé¨ Directors: {directors}\n"
                "üìù {plot}\n"
                "```\n\n"
                "**Popular Placeholders:**\n"
                "‚Ä¢ `{title}` - Movie/show title\n"
                "‚Ä¢ `{year}` - Release year\n"
                "‚Ä¢ `{rating}` - IMDB rating\n"
                "‚Ä¢ `{votes}` - Number of votes\n"
                "‚Ä¢ `{cast}` - Main cast with characters\n"
                "‚Ä¢ `{directors}` - Directors\n"
                "‚Ä¢ `{plot}` - Plot summary\n"
                "‚Ä¢ `{genres}` - Genres with emojis\n\n"
                "Use /imdbplaceholders to see all 50+ available placeholders!"
            )
            return
        template = parts[1]
    
    try:
        # Save template to database
        await mongo_client.db.imdb_templates.update_one(
            {"user_id": user_id},
            {"$set": {"user_id": user_id, "template": template}},
            upsert=True
        )
        
        logger.info(f"User {user_id} set IMDB template")
        await message.reply_text("‚úÖ IMDB template set successfully!")
        
    except Exception as e:
        logger.error(f"Error setting IMDB template: {e}")
        await message.reply_text("‚ùå Failed to set template.")


async def get_imdb_template_command(client: Client, message: Message):
    """Get user's IMDB template."""
    user_id = message.from_user.id
    
    try:
        template_doc = await mongo_client.db.imdb_templates.find_one({"user_id": user_id})
        
        if template_doc:
            template = template_doc.get("template", "")
            await message.reply_text(f"üìù Your current IMDB template:\n\n`{template}`")
        else:
            await message.reply_text("‚ÑπÔ∏è You don't have a custom IMDB template set.")
            
    except Exception as e:
        logger.error(f"Error getting IMDB template: {e}")
        await message.reply_text("‚ùå Failed to get template.")


async def remove_imdb_template_command(client: Client, message: Message):
    """Remove user's IMDB template."""
    user_id = message.from_user.id
    
    try:
        result = await mongo_client.db.imdb_templates.delete_one({"user_id": user_id})
        
        if result.deleted_count > 0:
            logger.info(f"User {user_id} removed IMDB template")
            await message.reply_text("‚úÖ IMDB template removed successfully!")
        else:
            await message.reply_text("‚ÑπÔ∏è You don't have an IMDB template to remove.")
            
    except Exception as e:
        logger.error(f"Error removing IMDB template: {e}")
        await message.reply_text("‚ùå Failed to remove template.")


async def preview_imdb_template_command(client: Client, message: Message):
    """Preview user's IMDB template."""
    user_id = message.from_user.id
    
    try:
        template_doc = await mongo_client.db.imdb_templates.find_one({"user_id": user_id})
        
        if not template_doc:
            await message.reply_text("‚ÑπÔ∏è You don't have a custom IMDB template set.")
            return
        
        # Mock data for preview (comprehensive)
        mock_data = {
            "title": "Sample Movie",
            "kind": "movie",
            "year": "2023",
            "rating": "8.7", 
            "votes": "125,456",
            "runtime": "142 min",
            "plot": "This is a sample plot for preview purposes. An epic tale of adventure...",
            "cast": "John Doe (Hero), Jane Smith (Heroine), Bob Wilson (Villain)",
            "cast_simple": "John Doe, Jane Smith, Bob Wilson",
            "directors": "Director Name",
            "writers": "Writer A, Writer B",
            "producers": "Producer X, Producer Y",
            "composers": "Composer Z",
            "cinematographers": "Camera Director",
            "editors": "Editor Name",
            "production_designers": "Design Lead",
            "costume_designers": "Costume Head",
            "genres": "üé≠ Drama, üé¨ Action",
            "countries": "United States",
            "languages": "English, Spanish",
            "mpaa": "PG-13",
            "certificates": "US:PG-13, UK:12A",
            "imdb_url": "https://imdb.com/title/tt1234567",
            "imdb_id": "tt1234567",
            "poster": "https://example.com/poster.jpg",
            "is_series": "False",
            "is_episode": "False", 
            "series_info": "",
            "episode_info": "",
            "release_dates": "March 15, 2023",
            "premiere_date": "March 12, 2023",
            "original_air_date": "",
            "budget": "$50M",
            "gross": "$200M",
            "box_office": "Budget: $50M | Gross: $200M",
            "opening_weekend_usa": "$25M"
        }
        
        try:
            preview = template_doc["template"].format(**mock_data)
            await message.reply_text(f"üëÅÔ∏è **Template Preview:**\n\n{preview}")
        except KeyError as e:
            await message.reply_text(f"‚ùå Template error: Unknown placeholder {e}")
        except Exception as e:
            await message.reply_text(f"‚ùå Template formatting error: {e}")
            
    except Exception as e:
        logger.error(f"Error previewing IMDB template: {e}")
        await message.reply_text("‚ùå Failed to preview template.")


async def mdl_placeholders_command(client: Client, message: Message):
    """Show all available MyDramaList placeholders."""
    placeholders_text = """
üìã **MyDramaList Template Placeholders**

**üì∫ Basic Information:**
‚Ä¢ `{title}` - Drama title
‚Ä¢ `{complete_title}` - Full drama title
‚Ä¢ `{native_title}` - Original language title
‚Ä¢ `{also_known_as}` - Alternative names
‚Ä¢ `{year}` - Release year
‚Ä¢ `{rating}` - User rating
‚Ä¢ `{link}` - MyDramaList URL

**üìç Details:**
‚Ä¢ `{country}` - Country of origin
‚Ä¢ `{type}` - Content type (Drama/Movie)
‚Ä¢ `{episodes}` - Number of episodes
‚Ä¢ `{duration}` - Episode duration
‚Ä¢ `{aired}` - Air date
‚Ä¢ `{aired_on}` - Broadcasting network
‚Ä¢ `{original_network}` - Original broadcaster
‚Ä¢ `{content_rating}` - Age rating

**üìä Stats & Rankings:**
‚Ä¢ `{score}` - Overall score
‚Ä¢ `{ranked}` - Ranking position
‚Ä¢ `{popularity}` - Popularity ranking
‚Ä¢ `{watchers}` - Number of watchers
‚Ä¢ `{favorites}` - Times favorited

**üé≠ Content:**
‚Ä¢ `{synopsis}` - Plot summary
‚Ä¢ `{genres}` - Genres with emojis
‚Ä¢ `{tags}` - Drama tags
‚Ä¢ `{poster}` - Poster image URL

**üìÖ Release Info:**
‚Ä¢ `{release_date}` - Release/air date

**üí° Usage Tips:**
‚Ä¢ Use HTML formatting: `<b>bold</b>`, `<i>italic</i>`
‚Ä¢ Add emojis for visual appeal
‚Ä¢ Keep templates under 1000 characters
‚Ä¢ Use `{link}` at the end for "See more..."

**Example:**
```
üé≠ <b>{title}</b>
üìç {country} | {episodes} episodes
‚≠ê Rating: {rating}
üé¨ {genres}
üìñ {synopsis}
üîó <a href='{link}'>More details</a>
```
"""
    await message.reply_text(placeholders_text)


async def imdb_placeholders_command(client: Client, message: Message):
    """Show all available IMDB placeholders."""
    placeholders_text = """
üìã **IMDB Template Placeholders**

**üé¨ Basic Information:**
‚Ä¢ `{title}` - Movie/show title
‚Ä¢ `{kind}` - Type (movie, tvSeries, etc.)
‚Ä¢ `{year}` - Release year
‚Ä¢ `{rating}` - IMDB rating (1-10)
‚Ä¢ `{votes}` - Number of votes
‚Ä¢ `{runtime}` - Duration
‚Ä¢ `{imdb_url}` - IMDB URL
‚Ä¢ `{imdb_id}` - IMDB ID (tt123456)
‚Ä¢ `{poster}` - Poster image URL

**üåç Production:**
‚Ä¢ `{countries}` - Countries of origin
‚Ä¢ `{languages}` - Available languages
‚Ä¢ `{mpaa}` - MPAA rating (PG-13, R, etc.)
‚Ä¢ `{certificates}` - Content certificates

**üë• Cast & Crew:**
‚Ä¢ `{cast}` - Main cast with characters
‚Ä¢ `{cast_simple}` - Cast names only
‚Ä¢ `{directors}` - Directors
‚Ä¢ `{writers}` - Writers/Screenplay
‚Ä¢ `{producers}` - Producers
‚Ä¢ `{composers}` - Music composers
‚Ä¢ `{cinematographers}` - Cinematographers
‚Ä¢ `{editors}` - Film editors
‚Ä¢ `{production_designers}` - Production designers
‚Ä¢ `{costume_designers}` - Costume designers

**üì∫ Series/Episode Info:**
‚Ä¢ `{is_series}` - True if TV series
‚Ä¢ `{is_episode}` - True if episode
‚Ä¢ `{series_info}` - Season information
‚Ä¢ `{episode_info}` - Episode number (S1E1)

**üìÖ Release Information:**
‚Ä¢ `{release_dates}` - Release dates
‚Ä¢ `{premiere_date}` - Premiere date
‚Ä¢ `{original_air_date}` - Original air date (for TV)

**üé• Technical Details:**
‚Ä¢ `{aspect_ratios}` - Screen aspect ratios
‚Ä¢ `{sound_mix}` - Sound mixing formats
‚Ä¢ `{color_info}` - Color information

**üí∞ Box Office:**
‚Ä¢ `{budget}` - Production budget
‚Ä¢ `{gross}` - Gross earnings
‚Ä¢ `{box_office}` - Combined budget/gross
‚Ä¢ `{opening_weekend_usa}` - Opening weekend

**üé≠ Content:**
‚Ä¢ `{plot}` - Plot summary
‚Ä¢ `{genres}` - Genres with emojis

**üí° Usage Tips:**
‚Ä¢ Cast includes character names: "Actor (Character)"
‚Ä¢ Use `{cast_simple}` for names only
‚Ä¢ Series show season info, episodes show S1E1 format
‚Ä¢ Box office data available for movies only

**Example for Movies:**
```
üé¨ <b>{title}</b> ({year})
‚≠ê {rating}/10 ({votes} votes)
üé≠ {genres}
üé™ Cast: {cast}
üé¨ Directed by: {directors}
üí∞ {box_office}
üìù {plot}
```

**Example for TV Series:**
```
üì∫ <b>{title}</b> ({year})
‚≠ê {rating}/10 | {series_info}
üé≠ {genres}
üìÖ Aired: {original_air_date}
üé™ {cast}
üìù {plot}
```
"""
    await message.reply_text(placeholders_text)